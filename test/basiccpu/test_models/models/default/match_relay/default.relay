def @main(%input_0: Tensor[(1, 3, 32, 32), int8] /* ty=Tensor[(1, 3, 32, 32), int8] */) -> Tensor[(1, 1, 16, 16), int32] {
  @tvmgen_default_match_main_0(%input_0) /* ty=Tensor[(1, 1, 16, 16), int32] */
}

def @tvmgen_default_match_main_0(%match_0_i0: Tensor[(1, 3, 32, 32), int8] /* ty=Tensor[(1, 3, 32, 32), int8] */, Compiler="match", Primitive=1, Inline=1, global_symbol="tvmgen_default_match_main_0") -> Tensor[(1, 1, 16, 16), int32] {
  %2 = fn (%FunctionVar_0_0: Tensor[(1, 3, 32, 32), int8] /* ty=Tensor[(1, 3, 32, 32), int8] */, %FunctionVar_0_1: Tensor[(1, 3, 3, 3), int8] /* ty=Tensor[(1, 3, 3, 3), int8] */, %FunctionVar_0_2: Tensor[(1), int32] /* ty=Tensor[(1), int32] */, PartitionedFromPattern="nn.conv2d_nn.bias_add_nn.relu_", Composite="match.neoptex.neoptexvectcpu.vec_conv") -> Tensor[(1, 1, 16, 16), int32] {
    %0 = nn.conv2d(%FunctionVar_0_0, %FunctionVar_0_1, strides=[2, 2], padding=[1, 1, 1, 1], kernel_size=[3, 3], out_dtype="int32") /* ty=Tensor[(1, 1, 16, 16), int32] */;
    %1 = nn.bias_add(%0, %FunctionVar_0_2, axis=0) /* ty=Tensor[(1, 1, 16, 16), int32] */;
    nn.relu(%1) /* ty=Tensor[(1, 1, 16, 16), int32] */
  } /* ty=fn (Tensor[(1, 3, 32, 32), int8], Tensor[(1, 3, 3, 3), int8], Tensor[(1), int32]) -> Tensor[(1, 1, 16, 16), int32] */;
  %2(%match_0_i0, meta[relay.Constant][0] /* ty=Tensor[(1, 3, 3, 3), int8] */, meta[relay.Constant][1] /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1, 1, 16, 16), int32] */
}

